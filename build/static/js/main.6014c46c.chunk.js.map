{"version":3,"sources":["utils.ts","MintCountdown.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","candy-machine.ts","connection.tsx"],"names":["toDate","value","Date","toNumber","numberFormater","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","formatNumber","format","val","asNumber","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","anchor","PublicKey","CIVIC","CIVIC_GATEKEEPER_NETWORK","getAtaForMint","async","mint","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","gatekeeperNetwork","Buffer","from","getNetworkToken","wallet","RootContainer","styled","_ref","theme","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","DoneContainer","_ref2","marginBottom","fontWeight","ItemContainer","MintCountdown","_ref3","date","status","onComplete","renderCountdown","_ref4","days","hours","minutes","seconds","completed","_jsx","children","_jsxs","Paper","elevation","concat","Countdown","renderer","CTAButton","Button","_templateObject","_taggedTemplateLiteral","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","useWallet","connection","useConnection","verified","setVerified","useState","requestGatewayToken","gatewayStatus","useGateway","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","waitForActiveToken","setWaitForActiveToken","useEffect","removeAccountChangeListener","previousGatewayStatus","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","ACTIVE","disabled","onClick","gatekeeper","network","toBase58","Error","gatewayToken","findGatewayToken","publicKey","isValid","window","open","gatewayTokenAddress","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","onGatewayTokenChange","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","_templateObject2","getCountdownDate","_candyMachine$state$e","endSettings","endSettingType","number","goLiveDate","getTime","undefined","Home","props","_candyMachine$state","_candyMachine$state2","_candyMachine$state2$","isUserMinting","setIsUserMinting","setCandyMachine","alertState","setAlertState","message","severity","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","anchorWallet","useAnchorWallet","connect","connected","cluster","refreshCandyMachineState","useCallback","commitment","arguments","length","error","hideDuration","Connection","candyMachineId","_cndy$state$endSettin","_cndy$state$endSettin2","_cndy$state$whitelist","_cndy$state$whitelist2","_cndy$state$gatekeepe","cndy","getCandyMachineState","active","presale","isWLUser","userPrice","price","whitelistMintSettings","token","balance","getTokenAccountBalance","parseInt","amount","e","tokenMint","valid","gte","getBalance","limit","Math","min","itemsAvailable","itemsRedeemed","collectionPDA","getCollectionPDA","collectionPDAAccount","getAccountInfo","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","startsWith","beforeTransactions","afterTransactions","program","_setupMint","setupMint","createAccountsForMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintResult","mintOneToken","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","setTimeout","Container","marginTop","maxWidth","position","paddingBottom","backgroundColor","_Fragment","Grid","container","direction","wrap","item","xs","Typography","align","signTransaction","GatewayProvider","CANDY_MACHINE_PROGRAM","clusterUrl","options","autoShowModal","adapter","name","SolanaMobileWalletAdapterWalletName","preventDefault","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","getCandyMachineId","process","_process$env$REACT_AP","_process$env$REACT_AP2","clusterApiUrl","App","endpoint","useMemo","wallets","PhantomWalletAdapter","SolflareWalletAdapter","SlopeWalletAdapter","SolletWalletAdapter","SolletExtensionWalletAdapter","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","WalletDialogProvider","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","done","slot","confirmations","subId","Promise","resolve","reject","signatureStatuses","getSignatureStatuses","sleep","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","currentBlockTime","all","idl","fetchIdl","account","fetch","getProgramState","_await$connection$get","getSlot","getBlockTime","getCurrentBlockTime","timeDiff","id","authority","treasury","hiddenSettings","getFreezePdaState","freezePda","getMasterEdition","getMetadata","getCandyMachineCreator","getFreezePda","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","MintLayout","span","lamports","getMinimumBalanceForRentExemption","Token","createInitMintInstruction","createMintToInstruction","userTokenAccount","sendTransactions","SequenceType","StopOnFailure","txs","_setupState$mint","setupState","userPayingAccountAddress","remainingAccounts","push","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","toString","freezePdaState","freezeAta","map","rm","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","collectionData","collectionPda","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","ms","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","blockhash","WalletNotConnectedError","unsignedTxns","getLatestBlockhash","i","Transaction","forEach","add","recentBlockhash","feePayer","partialSign","partiallySignedTransactions","filter","signatures","sig","equals","fullySignedTransactions","signedTxns","signAllTransactions","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","result","getUnixTs","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","simulateResult","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","encodedTransaction","_serialize","args","encoding","res","_rpcRequest","simulateTransaction","logs","line","slice","JSON","stringify","onSignature","context"],"mappings":"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","file":"static/js/main.6014c46c.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { SystemProgram } from \"@solana/web3.js\";\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from \"@solana/web3.js\";\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n  hideDuration?: number | null;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"decimal\",\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return \"--\";\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  \"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"\r\n);\r\n\r\nexport const CIVIC_GATEKEEPER_NETWORK =\r\n  \"ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6\";\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from(\"expire\")],\r\n    CIVIC\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from(\"gateway\"),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n","import { Paper } from \"@mui/material\";\r\nimport Countdown from \"react-countdown\";\r\nimport React from \"react\";\r\nimport { styled } from \"@mui/system\";\r\n\r\nconst RootContainer = styled(\"div\")(({ theme }) => ({\r\n  display: \"flex\",\r\n  padding: theme.spacing(0),\r\n  \"& > *\": {\r\n    margin: theme.spacing(0.4),\r\n    width: theme.spacing(6),\r\n    height: theme.spacing(6),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignContent: \"center\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    background: \"#384457\",\r\n    color: \"white\",\r\n    borderRadius: 5,\r\n    fontSize: 10,\r\n  },\r\n}));\r\n\r\nconst DoneContainer = styled(\"span\")(({ theme }) => ({\r\n  display: \"flex\",\r\n  margin: 0,\r\n  marginBottom: theme.spacing(0.5),\r\n  height: theme.spacing(3.5),\r\n  padding: theme.spacing(1),\r\n  flexDirection: \"column\",\r\n  alignContent: \"center\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n  background: \"#384457\",\r\n  color: \"white\",\r\n  borderRadius: 5,\r\n  fontWeight: \"bold\",\r\n  fontSize: 18,\r\n}));\r\n\r\nconst ItemContainer = styled(\"span\")({\r\n  fontWeight: \"bold\",\r\n  fontSize: 18,\r\n});\r\n\r\ninterface MintCountdownProps {\r\n  date: Date | undefined;\r\n  style?: React.CSSProperties;\r\n  status?: string;\r\n  onComplete?: () => void;\r\n}\r\n\r\ninterface MintCountdownRender {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\r\n  date,\r\n  status,\r\n  style,\r\n  onComplete,\r\n}) => {\r\n  const renderCountdown = ({\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    completed,\r\n  }: MintCountdownRender) => {\r\n    hours += days * 24;\r\n    if (completed) {\r\n      return status ? <DoneContainer>{status}</DoneContainer> : null;\r\n    } else {\r\n      return (\r\n        <RootContainer style={style}>\r\n          <Paper elevation={0}>\r\n            <ItemContainer>{hours < 10 ? `0${hours}` : hours}</ItemContainer>\r\n            <span>hrs</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <ItemContainer>\r\n              {minutes < 10 ? `0${minutes}` : minutes}\r\n            </ItemContainer>\r\n            <span>mins</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <ItemContainer>\r\n              {seconds < 10 ? `0${seconds}` : seconds}\r\n            </ItemContainer>\r\n            <span>secs</span>\r\n          </Paper>\r\n        </RootContainer>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (date) {\r\n    return (\r\n      <Countdown\r\n        date={date}\r\n        onComplete={onComplete}\r\n        renderer={renderCountdown}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import styled from \"styled-components\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { CandyMachineAccount } from \"./candy-machine\";\r\nimport { CircularProgress } from \"@mui/material\";\r\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\r\nimport {\r\n  findGatewayToken,\r\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\r\n  onGatewayTokenChange,\r\n  removeAccountChangeListener,\r\n} from \"@identity.com/solana-gateway-ts\";\r\nimport { CIVIC_GATEKEEPER_NETWORK } from \"./utils\";\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`; // add your own styles here\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  isMinting,\r\n  setIsMinting,\r\n  isActive,\r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine?: CandyMachineAccount;\r\n  isMinting: boolean;\r\n  setIsMinting: (val: boolean) => void;\r\n  isActive: boolean;\r\n}) => {\r\n  const wallet = useWallet();\r\n  const connection = useConnection();\r\n  const [verified, setVerified] = useState(false);\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\r\n  const [clicked, setClicked] = useState(false);\r\n  const [waitForActiveToken, setWaitForActiveToken] = useState(false);\r\n\r\n  const getMintButtonContent = () => {\r\n    if (candyMachine?.state.isSoldOut) {\r\n      return \"SOLD OUT\";\r\n    } else if (isMinting) {\r\n      return <CircularProgress />;\r\n    } else if (\r\n      candyMachine?.state.isPresale ||\r\n      candyMachine?.state.isWhitelistOnly\r\n    ) {\r\n      return \"WHITELIST MINT\";\r\n    }\r\n\r\n    return \"MINT\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    const mint = async () => {\r\n      await removeAccountChangeListener(\r\n        connection.connection,\r\n        webSocketSubscriptionId\r\n      );\r\n      await onMint();\r\n\r\n      setClicked(false);\r\n      setVerified(false);\r\n    };\r\n    if (verified && clicked) {\r\n      mint();\r\n    }\r\n  }, [\r\n    verified,\r\n    clicked,\r\n    connection.connection,\r\n    onMint,\r\n    webSocketSubscriptionId,\r\n  ]);\r\n\r\n  const previousGatewayStatus = usePrevious(gatewayStatus);\r\n  useEffect(() => {\r\n    const fromStates = [\r\n      GatewayStatus.NOT_REQUESTED,\r\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\r\n    ];\r\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\r\n    if (\r\n      fromStates.find((state) => previousGatewayStatus === state) &&\r\n      !invalidToStates.find((state) => gatewayStatus === state)\r\n    ) {\r\n      setIsMinting(true);\r\n    }\r\n    console.log(\"change: \", GatewayStatus[gatewayStatus]);\r\n  }, [waitForActiveToken, previousGatewayStatus, gatewayStatus]);\r\n\r\n  useEffect(() => {\r\n    if (waitForActiveToken && gatewayStatus === GatewayStatus.ACTIVE) {\r\n      console.log(\"Minting after token active\");\r\n      setWaitForActiveToken(false);\r\n      onMint();\r\n    }\r\n  }, [waitForActiveToken, gatewayStatus, onMint]);\r\n\r\n  return (\r\n    <CTAButton\r\n      disabled={isMinting || !isActive}\r\n      onClick={async () => {\r\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\r\n          const network =\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\r\n          if (network === CIVIC_GATEKEEPER_NETWORK) {\r\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\r\n              await onMint();\r\n            } else {\r\n              // setIsMinting(true);\r\n              setWaitForActiveToken(true);\r\n              await requestGatewayToken();\r\n              console.log(\"after: \", gatewayStatus);\r\n            }\r\n          } else if (\r\n            network === \"ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE\" ||\r\n            network === \"tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt\"\r\n          ) {\r\n            setClicked(true);\r\n            const gatewayToken = await findGatewayToken(\r\n              connection.connection,\r\n              wallet.publicKey!,\r\n              candyMachine.state.gatekeeper.gatekeeperNetwork\r\n            );\r\n\r\n            if (gatewayToken?.isValid()) {\r\n              await onMint();\r\n            } else {\r\n              window.open(\r\n                `https://verify.encore.fans/?gkNetwork=${network}`,\r\n                \"_blank\"\r\n              );\r\n\r\n              const gatewayTokenAddress =\r\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\r\n                  wallet.publicKey!,\r\n                  candyMachine.state.gatekeeper.gatekeeperNetwork\r\n                );\r\n\r\n              setWebSocketSubscriptionId(\r\n                onGatewayTokenChange(\r\n                  connection.connection,\r\n                  gatewayTokenAddress,\r\n                  () => setVerified(true),\r\n                  \"confirmed\"\r\n                )\r\n              );\r\n            }\r\n          } else {\r\n            setClicked(false);\r\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\r\n          }\r\n        } else {\r\n          await onMint();\r\n          setClicked(false);\r\n        }\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getMintButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n\r\nfunction usePrevious<T>(value: T): T | undefined {\r\n  const ref = useRef<T>();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref.current;\r\n}\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { Container, Snackbar } from \"@mui/material\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Alert from \"@mui/lab/Alert\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport {\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  Transaction,\r\n} from \"@solana/web3.js\";\r\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CANDY_MACHINE_PROGRAM,\r\n  CandyMachineAccount,\r\n  createAccountsForMint,\r\n  getCandyMachineState,\r\n  getCollectionPDA,\r\n  mintOneToken,\r\n  SetupState,\r\n} from \"./candy-machine\";\r\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"./utils\";\r\nimport { MintCountdown } from \"./MintCountdown\";\r\nimport { MintButton } from \"./MintButton\";\r\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport { SolanaMobileWalletAdapterWalletName } from \"@solana-mobile/wallet-adapter-mobile\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div``; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n  network: WalletAdapterNetwork;\r\n  error?: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\r\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [isValidBalance, setIsValidBalance] = useState(false);\r\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\r\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\r\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n  const anchorWallet = useAnchorWallet();\r\n  const { connect, connected, publicKey, wallet } = useWallet();\r\n  const cluster = props.network;\r\n\r\n  const refreshCandyMachineState = useCallback(\r\n    async (commitment: Commitment = \"confirmed\") => {\r\n      if (!publicKey) {\r\n        return;\r\n      }\r\n      if (props.error !== undefined) {\r\n        setAlertState({\r\n          open: true,\r\n          message: props.error,\r\n          severity: \"error\",\r\n          hideDuration: null,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const connection = new Connection(props.rpcHost, commitment);\r\n\r\n      if (props.candyMachineId) {\r\n        try {\r\n          const cndy = await getCandyMachineState(\r\n            anchorWallet as anchor.Wallet,\r\n            props.candyMachineId,\r\n            connection\r\n          );\r\n          console.log(\"Candy machine state: \", cndy);\r\n          let active = cndy?.state.goLiveDate\r\n            ? cndy?.state.goLiveDate.toNumber() < new Date().getTime() / 1000\r\n            : false;\r\n          let presale = false;\r\n\r\n          // duplication of state to make sure we have the right values!\r\n          let isWLUser = false;\r\n          let userPrice = cndy.state.price;\r\n\r\n          // whitelist mint?\r\n          if (cndy?.state.whitelistMintSettings) {\r\n            // is it a presale mint?\r\n            if (\r\n              cndy.state.whitelistMintSettings.presale &&\r\n              (!cndy.state.goLiveDate ||\r\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\r\n            ) {\r\n              presale = true;\r\n            }\r\n            // is there a discount?\r\n            if (cndy.state.whitelistMintSettings.discountPrice) {\r\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\r\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\r\n            } else {\r\n              setDiscountPrice(undefined);\r\n              // when presale=false and discountPrice=null, mint is restricted\r\n              // to whitelist users only\r\n              if (!cndy.state.whitelistMintSettings.presale) {\r\n                cndy.state.isWhitelistOnly = true;\r\n              }\r\n            }\r\n            // retrieves the whitelist token\r\n            const mint = new anchor.web3.PublicKey(\r\n              cndy.state.whitelistMintSettings.mint\r\n            );\r\n            const token = (await getAtaForMint(mint, publicKey))[0];\r\n\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n              isWLUser = parseInt(balance.value.amount) > 0;\r\n              // only whitelist the user if the balance > 0\r\n              setIsWhitelistUser(isWLUser);\r\n\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = isWLUser && (presale || active);\r\n              }\r\n            } catch (e) {\r\n              setIsWhitelistUser(false);\r\n              // no whitelist user, no mint\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = false;\r\n              }\r\n              console.log(\r\n                \"There was a problem fetching whitelist token balance\"\r\n              );\r\n              console.log(e);\r\n            }\r\n          }\r\n          userPrice = isWLUser ? userPrice : cndy.state.price;\r\n\r\n          if (cndy?.state.tokenMint) {\r\n            // retrieves the SPL token\r\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\r\n            const token = (await getAtaForMint(mint, publicKey))[0];\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n\r\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\r\n\r\n              // only allow user to mint if token balance >  the user if the balance > 0\r\n              setIsValidBalance(valid);\r\n              active = active && valid;\r\n            } catch (e) {\r\n              setIsValidBalance(false);\r\n              active = false;\r\n              // no whitelist user, no mint\r\n              console.log(\"There was a problem fetching SPL token balance\");\r\n              console.log(e);\r\n            }\r\n          } else {\r\n            const balance = new anchor.BN(\r\n              await connection.getBalance(publicKey)\r\n            );\r\n            const valid = balance.gte(userPrice);\r\n            setIsValidBalance(valid);\r\n            active = active && valid;\r\n          }\r\n\r\n          // datetime to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.date) {\r\n            setEndDate(toDate(cndy.state.endSettings.number));\r\n            if (\r\n              cndy.state.endSettings.number.toNumber() <\r\n              new Date().getTime() / 1000\r\n            ) {\r\n              active = false;\r\n            }\r\n          }\r\n          // amount to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.amount) {\r\n            const limit = Math.min(\r\n              cndy.state.endSettings.number.toNumber(),\r\n              cndy.state.itemsAvailable\r\n            );\r\n            if (cndy.state.itemsRedeemed < limit) {\r\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n            } else {\r\n              setItemsRemaining(0);\r\n              cndy.state.isSoldOut = true;\r\n            }\r\n          } else {\r\n            setItemsRemaining(cndy.state.itemsRemaining);\r\n          }\r\n\r\n          if (cndy.state.isSoldOut) {\r\n            active = false;\r\n          }\r\n\r\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\r\n          const collectionPDAAccount = await connection.getAccountInfo(\r\n            collectionPDA\r\n          );\r\n\r\n          setIsActive((cndy.state.isActive = active));\r\n          setIsPresale((cndy.state.isPresale = presale));\r\n          setCandyMachine(cndy);\r\n\r\n          const txnEstimate =\r\n            892 +\r\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\r\n            (cndy.state.tokenMint ? 66 : 0) +\r\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\r\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\r\n            (cndy.state.gatekeeper ? 33 : 0) +\r\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\r\n\r\n          setNeedTxnSplit(txnEstimate > 1230);\r\n        } catch (e) {\r\n          if (e instanceof Error) {\r\n            if (\r\n              e.message === `Account does not exist ${props.candyMachineId}`\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value wrong in your .env file, or you are using the wrong RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            } else if (\r\n              e.message.startsWith(\"failed to get info about account\")\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            }\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: `${e}`,\r\n              severity: \"error\",\r\n              hideDuration: null,\r\n            });\r\n          }\r\n          console.log(e);\r\n        }\r\n      } else {\r\n        setAlertState({\r\n          open: true,\r\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\r\n          severity: \"error\",\r\n          hideDuration: null,\r\n        });\r\n      }\r\n    },\r\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost]\r\n  );\r\n\r\n  const onMint = async (\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = []\r\n  ) => {\r\n    try {\r\n      setIsUserMinting(true);\r\n      if (connected && candyMachine?.program && publicKey) {\r\n        let setupMint: SetupState | undefined;\r\n        if (needTxnSplit && setupTxn === undefined) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Please sign account setup transaction\",\r\n            severity: \"info\",\r\n          });\r\n          setupMint = await createAccountsForMint(candyMachine, publicKey);\r\n          let status: any = { err: true };\r\n          if (setupMint.transaction) {\r\n            status = await awaitTransactionSignatureConfirmation(\r\n              setupMint.transaction,\r\n              props.txTimeout,\r\n              props.connection,\r\n              true\r\n            );\r\n          }\r\n          if (status && !status.err) {\r\n            setSetupTxn(setupMint);\r\n            setAlertState({\r\n              open: true,\r\n              message:\r\n                \"Setup transaction succeeded! Please sign minting transaction\",\r\n              severity: \"info\",\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: \"Mint failed! Please try again!\",\r\n              severity: \"error\",\r\n            });\r\n            setIsUserMinting(false);\r\n            return;\r\n          }\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Please sign minting transaction\",\r\n            severity: \"info\",\r\n          });\r\n        }\r\n\r\n        const mintResult = await mintOneToken(\r\n          candyMachine,\r\n          publicKey,\r\n          beforeTransactions,\r\n          afterTransactions,\r\n          setupMint ?? setupTxn\r\n        );\r\n\r\n        let status: any = { err: true };\r\n        let metadataStatus = null;\r\n        if (mintResult) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintResult.mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true\r\n          );\r\n\r\n          metadataStatus =\r\n            await candyMachine.program.provider.connection.getAccountInfo(\r\n              mintResult.metadataKey,\r\n              \"processed\"\r\n            );\r\n          console.log(\"Metadata status: \", !!metadataStatus);\r\n        }\r\n\r\n        if (status && !status.err && metadataStatus) {\r\n          // manual update since the refresh might not detect\r\n          // the change immediately\r\n          const remaining = itemsRemaining! - 1;\r\n          setItemsRemaining(remaining);\r\n          setIsActive((candyMachine.state.isActive = remaining > 0));\r\n          candyMachine.state.isSoldOut = remaining === 0;\r\n          setSetupTxn(undefined);\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n            hideDuration: 7000,\r\n          });\r\n          refreshCandyMachineState(\"processed\");\r\n        } else if (status && !status.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message:\r\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\r\n            severity: \"error\",\r\n            hideDuration: 8000,\r\n          });\r\n          refreshCandyMachineState();\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n          refreshCandyMachineState();\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = \"Transaction timeout! Please try again.\";\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n      // updates the candy machine state to reflect the latest\r\n      // information on chain\r\n      refreshCandyMachineState();\r\n    } finally {\r\n      setIsUserMinting(false);\r\n    }\r\n  };\r\n\r\n  const toggleMintButton = () => {\r\n    let active = !isActive || isPresale;\r\n\r\n    if (active) {\r\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\r\n        active = false;\r\n      }\r\n      if (endDate && Date.now() >= endDate.getTime()) {\r\n        active = false;\r\n      }\r\n    }\r\n\r\n    if (\r\n      isPresale &&\r\n      candyMachine!.state.goLiveDate &&\r\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\r\n    ) {\r\n      setIsPresale((candyMachine!.state.isPresale = false));\r\n    }\r\n\r\n    setIsActive((candyMachine!.state.isActive = active));\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    (function loop() {\r\n      setTimeout(() => {\r\n        refreshCandyMachineState();\r\n        loop();\r\n      }, 20000);\r\n    })();\r\n  }, [refreshCandyMachineState]);\r\n\r\n  return (\r\n    <Container style={{ marginTop: 100 }}>\r\n      <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\r\n        <Paper\r\n          style={{\r\n            padding: 24,\r\n            paddingBottom: 10,\r\n            backgroundColor: \"#151A1F\",\r\n            borderRadius: 6,\r\n          }}\r\n        >\r\n          {!connected ? (\r\n            <ConnectButton\r\n              onClick={(e) => {\r\n                if (\r\n                  wallet?.adapter.name === SolanaMobileWalletAdapterWalletName\r\n                ) {\r\n                  connect();\r\n                  e.preventDefault();\r\n                }\r\n              }}\r\n            >\r\n              Connect Wallet\r\n            </ConnectButton>\r\n          ) : (\r\n            <>\r\n              {candyMachine && (\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justifyContent=\"center\"\r\n                  wrap=\"nowrap\"\r\n                >\r\n                  <Grid item xs={3}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      Remaining\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {`${itemsRemaining}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      {isWhitelistUser && discountPrice\r\n                        ? \"Discount Price\"\r\n                        : \"Price\"}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{ fontWeight: \"bold\" }}\r\n                    >\r\n                      {isWhitelistUser && discountPrice\r\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\r\n                        : `◎ ${formatNumber.asNumber(\r\n                            candyMachine.state.price\r\n                          )}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={5}>\r\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"endSettings\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: \"flex-end\" }}\r\n                          status=\"COMPLETED\"\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        <Typography\r\n                          variant=\"caption\"\r\n                          align=\"center\"\r\n                          display=\"block\"\r\n                          style={{ fontWeight: \"bold\" }}\r\n                        >\r\n                          TO END OF MINT\r\n                        </Typography>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"goLive\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: \"flex-end\" }}\r\n                          status={\r\n                            candyMachine?.state?.isSoldOut ||\r\n                            (endDate && Date.now() > endDate.getTime())\r\n                              ? \"COMPLETED\"\r\n                              : isPresale\r\n                              ? \"PRESALE\"\r\n                              : \"LIVE\"\r\n                          }\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        {isPresale &&\r\n                          candyMachine.state.goLiveDate &&\r\n                          candyMachine.state.goLiveDate.toNumber() >\r\n                            new Date().getTime() / 1000 && (\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              align=\"center\"\r\n                              display=\"block\"\r\n                              style={{ fontWeight: \"bold\" }}\r\n                            >\r\n                              UNTIL PUBLIC MINT\r\n                            </Typography>\r\n                          )}\r\n                      </>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              )}\r\n              <MintContainer>\r\n                {candyMachine?.state.isActive &&\r\n                candyMachine?.state.gatekeeper &&\r\n                publicKey &&\r\n                anchorWallet?.signTransaction ? (\r\n                  <GatewayProvider\r\n                    wallet={{\r\n                      publicKey:\r\n                        publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                      signTransaction: anchorWallet.signTransaction,\r\n                    }}\r\n                    gatekeeperNetwork={\r\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                    }\r\n                    clusterUrl={rpcUrl}\r\n                    cluster={cluster}\r\n                    options={{ autoShowModal: false }}\r\n                  >\r\n                    <MintButton\r\n                      candyMachine={candyMachine}\r\n                      isMinting={isUserMinting}\r\n                      setIsMinting={(val) => setIsUserMinting(val)}\r\n                      onMint={onMint}\r\n                      isActive={\r\n                        isActive ||\r\n                        (isPresale && isWhitelistUser && isValidBalance)\r\n                      }\r\n                    />\r\n                  </GatewayProvider>\r\n                ) : (\r\n                  <MintButton\r\n                    candyMachine={candyMachine}\r\n                    isMinting={isUserMinting}\r\n                    setIsMinting={(val) => setIsUserMinting(val)}\r\n                    onMint={onMint}\r\n                    isActive={\r\n                      isActive ||\r\n                      (isPresale && isWhitelistUser && isValidBalance)\r\n                    }\r\n                  />\r\n                )}\r\n              </MintContainer>\r\n            </>\r\n          )}\r\n          <Typography\r\n            variant=\"caption\"\r\n            align=\"center\"\r\n            display=\"block\"\r\n            style={{ marginTop: 7, color: \"grey\" }}\r\n          >\r\n            Powered by METAPLEX\r\n          </Typography>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={\r\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\r\n        }\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst getCountdownDate = (\r\n  candyMachine: CandyMachineAccount\r\n): Date | undefined => {\r\n  if (\r\n    candyMachine.state.isActive &&\r\n    candyMachine.state.endSettings?.endSettingType.date\r\n  ) {\r\n    return toDate(candyMachine.state.endSettings.number);\r\n  }\r\n\r\n  return toDate(\r\n    candyMachine.state.goLiveDate\r\n      ? candyMachine.state.goLiveDate\r\n      : candyMachine.state.isPresale\r\n      ? new anchor.BN(new Date().getTime() / 1000)\r\n      : undefined\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import \"./App.css\";\r\nimport { useMemo } from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport Home from \"./Home\";\r\nimport { DEFAULT_TIMEOUT } from \"./connection\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@mui/material\";\r\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-phantom\";\r\nimport { SlopeWalletAdapter } from \"@solana/wallet-adapter-slope\";\r\nimport { SolflareWalletAdapter } from \"@solana/wallet-adapter-solflare\";\r\nimport {\r\n  SolletWalletAdapter,\r\n  SolletExtensionWalletAdapter,\r\n} from \"@solana/wallet-adapter-sollet\";\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    mode: \"dark\",\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n  try {\r\n    return new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID!);\r\n  } catch (e) {\r\n    console.log(\"Failed to construct CandyMachineId\", e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nlet error: string | undefined = undefined;\r\n\r\nif (process.env.REACT_APP_SOLANA_NETWORK === undefined) {\r\n  error =\r\n    \"Your REACT_APP_SOLANA_NETWORK value in the .env file doesn't look right! The options are devnet and mainnet-beta!\";\r\n} else if (process.env.REACT_APP_SOLANA_RPC_HOST === undefined) {\r\n  error =\r\n    \"Your REACT_APP_SOLANA_RPC_HOST value in the .env file doesn't look right! Make sure you enter it in as a plain-text url (i.e., https://metaplex.devnet.rpcpool.com/)\";\r\n}\r\n\r\nconst candyMachineId = getCandyMachineId();\r\nconst network = (process.env.REACT_APP_SOLANA_NETWORK ??\r\n  \"devnet\") as WalletAdapterNetwork;\r\nconst rpcHost =\r\n  process.env.REACT_APP_SOLANA_RPC_HOST ?? anchor.web3.clusterApiUrl(\"devnet\");\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      new PhantomWalletAdapter(),\r\n      new SolflareWalletAdapter({ network }),\r\n      new SlopeWalletAdapter(),\r\n      new SolletWalletAdapter({ network }),\r\n      new SolletExtensionWalletAdapter({ network }),\r\n    ],\r\n    []\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <Home\r\n              candyMachineId={candyMachineId}\r\n              connection={connection}\r\n              txTimeout={DEFAULT_TIMEOUT}\r\n              rpcHost={rpcHost}\r\n              network={network}\r\n              error={error}\r\n            />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","/* eslint-disable */\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\r\nimport {\r\n  SystemProgram,\r\n  Transaction,\r\n  SYSVAR_SLOT_HASHES_PUBKEY,\r\n} from \"@solana/web3.js\";\r\nimport { sendTransactions, SequenceType } from \"./connection\";\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from \"./utils\";\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\ninterface CandyMachineState {\r\n  authority: anchor.web3.PublicKey;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: null | anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  isPresale: boolean;\r\n  isWhitelistOnly: boolean;\r\n  goLiveDate: null | anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | {\r\n    number: anchor.BN;\r\n    endSettingType: any;\r\n  };\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n  retainAuthority: boolean;\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  queryStatus = false\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  const subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  try {\r\n    await connection.removeSignatureListener(subId);\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: \"processed\",\r\n  });\r\n\r\n  const getProgramState = async (): Promise<[anchor.Program, any]> => {\r\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\r\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n    return [program, state];\r\n  };\r\n\r\n  const getCurrentBlockTime = async (): Promise<number> => {\r\n    const slot = await connection.getSlot();\r\n    return (await connection.getBlockTime(slot)) ?? new Date().getTime() / 1000;\r\n  };\r\n\r\n  const [[program, state], currentBlockTime] = await Promise.all([\r\n    getProgramState(),\r\n    getCurrentBlockTime(),\r\n  ]);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n  const timeDiff = new Date().getTime() / 1000 - currentBlockTime;\r\n  const goLiveDate =\r\n    state.data.goLiveDate !== null ? state.data.goLiveDate + timeDiff : null;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      authority: state.authority,\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive: false,\r\n      isPresale: false,\r\n      isWhitelistOnly: false,\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n      retainAuthority: state.data.retainAuthority,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getFreezePdaState = async (\r\n  program: anchor.Program,\r\n  freezePda: anchor.web3.PublicKey\r\n): Promise<any> => {\r\n  try {\r\n    const state: any = await program.account.freezePda.fetch(freezePda);\r\n    return state;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"edition\"),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM\r\n  );\r\n};\r\n\r\nexport const getFreezePda = async (\r\n  candyMachine: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from(\"freeze\"), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM\r\n  );\r\n};\r\n\r\nexport const getCollectionPDA = async (\r\n  candyMachineAddress: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from(\"collection\"), candyMachineAddress.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM\r\n  );\r\n};\r\n\r\nexport interface CollectionData {\r\n  mint: anchor.web3.PublicKey;\r\n  candyMachine: anchor.web3.PublicKey;\r\n}\r\n\r\nexport const getCollectionAuthorityRecordPDA = async (\r\n  mint: anchor.web3.PublicKey,\r\n  newAuthority: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"collection_authority\"),\r\n        newAuthority.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport type SetupState = {\r\n  mint: anchor.web3.Keypair;\r\n  userTokenAccount: anchor.web3.PublicKey;\r\n  transaction: string;\r\n};\r\n\r\nexport const createAccountsForMint = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey\r\n): Promise<SetupState> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1\r\n    ),\r\n  ];\r\n\r\n  return {\r\n    mint: mint,\r\n    userTokenAccount: userTokenAccountAddress,\r\n    transaction: (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        [instructions],\r\n        [signers],\r\n        SequenceType.StopOnFailure,\r\n        \"singleGossip\",\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        [],\r\n        []\r\n      )\r\n    ).txs[0].txid,\r\n  };\r\n};\r\n\r\ntype MintResult = {\r\n  mintTxId: string;\r\n  metadataKey: anchor.web3.PublicKey;\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = [],\r\n  setupState?: SetupState\r\n): Promise<MintResult | null> => {\r\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n    : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const instructions = [];\r\n  const signers: anchor.web3.Keypair[] = [];\r\n  console.log(\"SetupState: \", setupState);\r\n  if (!setupState) {\r\n    signers.push(mint);\r\n    instructions.push(\r\n      ...[\r\n        anchor.web3.SystemProgram.createAccount({\r\n          fromPubkey: payer,\r\n          newAccountPubkey: mint.publicKey,\r\n          space: MintLayout.span,\r\n          lamports:\r\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n              MintLayout.span\r\n            ),\r\n          programId: TOKEN_PROGRAM_ID,\r\n        }),\r\n        Token.createInitMintInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          0,\r\n          payer,\r\n          payer\r\n        ),\r\n        createAssociatedTokenAccountInstruction(\r\n          userTokenAccountAddress,\r\n          payer,\r\n          payer,\r\n          mint.publicKey\r\n        ),\r\n        Token.createMintToInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          userTokenAccountAddress,\r\n          payer,\r\n          [],\r\n          1\r\n        ),\r\n      ]\r\n    );\r\n  }\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getNetworkToken(\r\n          payer,\r\n          candyMachine.state.gatekeeper.gatekeeperNetwork\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkExpire(\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork\r\n          )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n      candyMachine.state.whitelistMintSettings.mint\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: payer,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: payer,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n    candyMachineAddress\r\n  );\r\n\r\n  const freezePda = (await getFreezePda(candyMachineAddress))[0];\r\n  console.log(freezePda.toString());\r\n\r\n  const freezePdaState = await getFreezePdaState(\r\n    candyMachine.program,\r\n    freezePda\r\n  );\r\n\r\n  console.log(\"Freeze state: \");\r\n  console.log(freezePdaState);\r\n\r\n  if (freezePdaState != null) {\r\n    remainingAccounts.push({\r\n      pubkey: freezePda,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: userTokenAccountAddress,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    });\r\n    if (candyMachine.state.tokenMint != null) {\r\n      const freezeAta = (\r\n        await getAtaForMint(candyMachine.state.tokenMint, freezePda)\r\n      )[0];\r\n      remainingAccounts.push({\r\n        pubkey: freezeAta,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  console.log(remainingAccounts.map((rm) => rm.pubkey.toBase58()));\r\n  instructions.push(\r\n    await candyMachine.program.instruction.mintNft(creatorBump, {\r\n      accounts: {\r\n        candyMachine: candyMachineAddress,\r\n        candyMachineCreator,\r\n        payer: payer,\r\n        wallet: candyMachine.state.treasury,\r\n        mint: mint.publicKey,\r\n        metadata: metadataAddress,\r\n        masterEdition,\r\n        mintAuthority: payer,\r\n        updateAuthority: payer,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\r\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n      },\r\n      remainingAccounts:\r\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n    })\r\n  );\r\n\r\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\r\n  const collectionPDAAccount =\r\n    await candyMachine.program.provider.connection.getAccountInfo(\r\n      collectionPDA\r\n    );\r\n\r\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\r\n    try {\r\n      const collectionData =\r\n        (await candyMachine.program.account.collectionPda.fetch(\r\n          collectionPDA\r\n        )) as CollectionData;\r\n      console.log(collectionData);\r\n      const collectionMint = collectionData.mint;\r\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\r\n        collectionMint,\r\n        collectionPDA\r\n      );\r\n      console.log(collectionMint);\r\n      if (collectionMint) {\r\n        const collectionMetadata = await getMetadata(collectionMint);\r\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\r\n        console.log(\"Collection PDA: \", collectionPDA.toBase58());\r\n        console.log(\"Authority: \", candyMachine.state.authority.toBase58());\r\n        instructions.push(\r\n          await candyMachine.program.instruction.setCollectionDuringMint({\r\n            accounts: {\r\n              candyMachine: candyMachineAddress,\r\n              metadata: metadataAddress,\r\n              payer: payer,\r\n              collectionPda: collectionPDA,\r\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n              collectionMint,\r\n              collectionMetadata,\r\n              collectionMasterEdition,\r\n              authority: candyMachine.state.authority,\r\n              collectionAuthorityRecord,\r\n            },\r\n          })\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const instructionsMatrix = [instructions];\r\n  const signersMatrix = [signers];\r\n\r\n  try {\r\n    const txns = (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        instructionsMatrix,\r\n        signersMatrix,\r\n        SequenceType.StopOnFailure,\r\n        \"singleGossip\",\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        beforeTransactions,\r\n        afterTransactions\r\n      )\r\n    ).txs.map((t) => t.txid);\r\n    const mintTxn = txns[0];\r\n    return {\r\n      mintTxId: mintTxn,\r\n      metadataKey: metadataAddress,\r\n    };\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n};\r\n","/* eslint-disable */\r\nimport {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n} from \"@solana/web3.js\";\r\n\r\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\r\n\r\nexport const DEFAULT_TIMEOUT = 60000;\r\n\r\nexport const getErrorForTransaction = async (\r\n  connection: Connection,\r\n  txid: string\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, \"max\");\r\n\r\n  const tx = await connection.getParsedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach((log) => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[][],\r\n  signers: Keypair[][]\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  const toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n          connection,\r\n          wallet,\r\n          instructions[0],\r\n          filteredSigners[0],\r\n          \"single\"\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n          connection,\r\n          wallet,\r\n          instructions,\r\n          filteredSigners,\r\n          SequenceType.StopOnFailure,\r\n          \"single\"\r\n        );\r\n        ids = ids.concat(txs.map((t) => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n      \"Died on \",\r\n      stopPoint,\r\n      \"retrying from instruction\",\r\n      instructions[stopPoint],\r\n      \"instructions length is\",\r\n      instructions.length\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructionSet: TransactionInstruction[][],\r\n  signersSet: Keypair[][],\r\n  sequenceType: SequenceType = SequenceType.Parallel,\r\n  commitment: Commitment = \"singleGossip\",\r\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\r\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n  blockhash?: Blockhash,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = []\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = beforeTransactions;\r\n\r\n  if (!blockhash) {\r\n    blockhash = (await connection.getLatestBlockhash(commitment)).blockhash;\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    const transaction = new Transaction();\r\n    instructions.forEach((instruction) => transaction.add(instruction));\r\n    transaction.recentBlockhash = blockhash;\r\n    transaction.feePayer = wallet.publicKey;\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n  unsignedTxns.push(...afterTransactions);\r\n\r\n  const partiallySignedTransactions = unsignedTxns.filter((t) =>\r\n    t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\r\n  );\r\n  const fullySignedTransactions = unsignedTxns.filter(\r\n    (t) => !t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\r\n  );\r\n  let signedTxns = await wallet.signAllTransactions(\r\n    partiallySignedTransactions\r\n  );\r\n  signedTxns = fullySignedTransactions.concat(signedTxns);\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  console.log(\r\n    \"Signed txns length\",\r\n    signedTxns.length,\r\n    \"vs handed in length\",\r\n    instructionSet.length\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise.then(({ txid, slot }) =>\r\n          successCallback(txid, i)\r\n        );\r\n        pendingTxns.push(signedTxnPromise);\r\n      } catch (e) {\r\n        console.log(\"Failed at txn index:\", i);\r\n        console.log(\"Caught failure:\", e);\r\n\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          return {\r\n            number: i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    const result = await Promise.all(pendingTxns);\r\n    return { number: signedTxns.length, txs: result };\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[] | Transaction,\r\n  signers: Keypair[],\r\n  awaitConfirmation = true,\r\n  commitment: Commitment = \"singleGossip\",\r\n  includesFeePayer: boolean = false,\r\n  blockhash?: Blockhash\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction: Transaction;\r\n  if (!Array.isArray(instructions)) {\r\n    transaction = instructions;\r\n  } else {\r\n    transaction = new Transaction();\r\n    instructions.forEach((instruction) => transaction.add(instruction));\r\n\r\n    transaction.recentBlockhash =\r\n      blockhash || (await connection.getLatestBlockhash(commitment)).blockhash;\r\n    if (includesFeePayer) {\r\n      transaction.feePayer = signers[0].publicKey;\r\n    } else {\r\n      transaction.feePayer = wallet.publicKey;\r\n    }\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  const options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      DEFAULT_TIMEOUT,\r\n      connection,\r\n      commitment\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  commitment: Commitment = \"singleGossip\",\r\n  includesFeePayer: boolean = false,\r\n  blockhash?: Blockhash,\r\n  beforeSend?: () => void\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach((instruction) => transaction.add(instruction));\r\n  transaction.recentBlockhash =\r\n    blockhash || (await connection.getLatestBlockhash(commitment)).blockhash;\r\n  if (includesFeePayer) {\r\n    transaction.feePayer = signers[0].publicKey;\r\n  } else {\r\n    transaction.feePayer = wallet.publicKey;\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    }\r\n  );\r\n\r\n  console.log(\"Started awaiting confirmation for\", txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      timeout,\r\n      connection,\r\n      \"recent\",\r\n      true\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error(\"Transaction failed: Custom instruction error\");\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error(\"Timeout Error caught\", err);\r\n    if (err.timeout) {\r\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, \"single\")\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith(\"Program log: \")) {\r\n            throw new Error(\r\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString(\"base64\");\r\n  const config: any = { encoding: \"base64\", commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\r\n  if (res.error) {\r\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n  commitment: Commitment = \"recent\",\r\n  queryStatus = false\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result, context) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log(\"Rejected via websocket\", result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log(\"Resolved via websocket\", result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error(\"WS error in setup\", txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  try {\r\n    await connection.removeSignatureListener(subId);\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n"],"sourceRoot":""}